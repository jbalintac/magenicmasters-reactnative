import React from 'react';
import { 
    Text, 
    Button, 
    TextInput, 
    TouchableOpacity, 
    View,
    StyleSheet,
    Image,
    PixelRatio
} from 'react-native';
import { createBottomTabNavigator  } from 'react-navigation';
import { YellowBox } from 'react-native';

YellowBox.ignoreWarnings(['Warning: isMounted(...) is deprecated', 'Module RCTImageLoader']);
YellowBox.ignoreWarnings(['Warning: Failed child context type', 'Module RCTImageLoader']);


import Swiper from 'react-native-swiper';
import { RNCamera } from 'react-native-camera';

const PushNotification = require('react-native-push-notification');
const ImagePicker = require('react-native-image-picker');


class CameraScreen extends React.Component {
    render() {
      return (
        <View style={styles.container}>
          <RNCamera
              ref={ref => {
                this.camera = ref;
              }}
              style = {styles.preview}
              type={RNCamera.Constants.Type.back}
              flashMode={RNCamera.Constants.FlashMode.on}
              permissionDialogTitle={'Permission to use camera'}
              permissionDialogMessage={'We need your permission to use your camera phone'}
          />
          <View style={{flex: 0, flexDirection: 'row', justifyContent: 'center',}}>
          <TouchableOpacity
              onPress={this.takePicture.bind(this)}
              style = {styles.capture}
          >
              <Text style={{fontSize: 14}}> SNAP </Text>
          </TouchableOpacity>
          </View>
        </View>
      );
    }
  
    takePicture = async function() {
      if (this.camera) {
        const options = { quality: 0.5, base64: true };
        const data = await this.camera.takePictureAsync(options)
        console.log(data.uri);
      }
    };
  }


class SwiperScreen extends React.Component {
    
    constructor(props) {
        super(props);
    }

    render() {
        return (
            <Swiper style={styles.wrapper} showsButtons={true}>
                <View style={styles.slide1}>
                    <Text style={styles.text}>Hello Swiper</Text>
                </View>
                <View style={styles.slide2}>
                    <Text style={styles.text}>Beautiful</Text>
                </View>
                <View style={styles.slide3}>
                    <Text style={styles.text}>And simple</Text>
                </View>
            </Swiper>
        );
    }
}



class NotificationScreen extends React.Component {
    
    constructor(props) {
        super(props);
    }

    render() {
        return (
            <View style={styles.mainView}>
                <Button
                    title="Local Push Notify"
                    onPress={() => {
                        PushNotification.localNotification({
                            /* Android Only Properties */
                            id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
                            ticker: "My Notification Ticker", // (optional)
                            autoCancel: true, // (optional) default: true
                            largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
                            smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
                            bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
                            subText: "This is a subText", // (optional) default: none
                            color: "red", // (optional) default: system default
                            vibrate: true, // (optional) default: true
                            vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
                            tag: 'some_tag', // (optional) add tag to message
                            group: "group", // (optional) add group to message
                            ongoing: false, // (optional) set whether this is an "ongoing" notification
                            /* iOS and Android properties */
                            title: "My Notification Title", // (optional)
                            message: "My Notification Message", // (required)
                            playSound: false, // (optional) default: true
                            soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
                            number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
                            repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
                            actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
                        });
                    }}
                    />
            </View>
        );
    }
}


class ImagePickerScreen extends React.Component {
    
      state = {
        avatarSource: null,
        videoSource: null
      };
    
      selectPhotoTapped() {
        const options = {
          quality: 1.0,
          maxWidth: 500,
          maxHeight: 500,
          storageOptions: {
            skipBackup: true
          }
        };
    
        ImagePicker.showImagePicker(options, (response) => {
          console.log('Response = ', response);
    
          if (response.didCancel) {
            console.log('User cancelled photo picker');
          }
          else if (response.error) {
            console.log('ImagePicker Error: ', response.error);
          }
          else if (response.customButton) {
            console.log('User tapped custom button: ', response.customButton);
          }
          else {
            let source = { uri: response.uri };
    
            // You can also display the image using data:
            // let source = { uri: 'data:image/jpeg;base64,' + response.data };
    
            this.setState({
              avatarSource: source
            });
          }
        });
      }
    
      selectVideoTapped() {
        const options = {
          title: 'Video Picker',
          takePhotoButtonTitle: 'Take Video...',
          mediaType: 'video',
          videoQuality: 'medium'
        };
    
        ImagePicker.showImagePicker(options, (response) => {
          console.log('Response = ', response);
    
          if (response.didCancel) {
            console.log('User cancelled video picker');
          }
          else if (response.error) {
            console.log('ImagePicker Error: ', response.error);
          }
          else if (response.customButton) {
            console.log('User tapped custom button: ', response.customButton);
          }
          else {
            this.setState({
              videoSource: response.uri
            });
          }
        });
      }
    
      render() {
        return (
          <View style={styles.imagecontainer}>
            <TouchableOpacity onPress={this.selectPhotoTapped.bind(this)}>
              <View style={[styles.avatar, styles.avatarContainer, {marginBottom: 20}]}>
              { this.state.avatarSource === null ? <Text>Select a Photo</Text> :
                <Image style={styles.avatar} source={this.state.avatarSource} />
              }
              </View>
            </TouchableOpacity>
    
            <TouchableOpacity onPress={this.selectVideoTapped.bind(this)}>
              <View style={[styles.avatar, styles.avatarContainer]}>
                <Text>Select a Video</Text>
              </View>
            </TouchableOpacity>
    
            { this.state.videoSource &&
              <Text style={{margin: 8, textAlign: 'center'}}>{this.state.videoSource}</Text>
            }
          </View>
        );
      }
    
    }

export default createBottomTabNavigator({
   
    ImagePickerScreen: {
        screen: ImagePickerScreen,
        navigationOptions: {tabBarLabel: "Image Picker"},
    },
    NotificationScreen: {
        screen: NotificationScreen,
        navigationOptions: {tabBarLabel: "Notification"},
    },
    CameraScreen: {
        screen: CameraScreen,
        navigationOptions: {tabBarLabel: "Camera"},
    },
    SwiperScreen: {
        screen: SwiperScreen,
        navigationOptions: {tabBarLabel: "Swiper"},
    }
});


const styles = StyleSheet.create({
    mainView: {
        flex: 1,
        flexDirection: "column",
        backgroundColor: "#BBDEFB"
    },
    topSpacer: {
        flex: 0.3
    },
    buttonSpacer: {
        flex: 0.2
    },
    wrapper: {
    },
    slide1: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: '#9DD6EB',
    },
    slide2: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: '#97CAE5',
    },
    slide3: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: '#92BBD9',
    },
    text: {
      color: '#fff',
      fontSize: 30,
      fontWeight: 'bold',
    },
    container: {
        flex: 1,
        flexDirection: 'column',
        backgroundColor: 'black'
      },
      preview: {
        flex: 1,
        justifyContent: 'flex-end',
        alignItems: 'center'
      },
      capture: {
        flex: 0,
        backgroundColor: '#fff',
        borderRadius: 5,
        padding: 15,
        paddingHorizontal: 20,
        alignSelf: 'center',
        margin: 20
      },
      imagecontainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#F5FCFF'
      },
      avatarContainer: {
        borderColor: '#9B9B9B',
        borderWidth: 1 / PixelRatio.get(),
        justifyContent: 'center',
        alignItems: 'center'
      },
      avatar: {
        borderRadius: 75,
        width: 150,
        height: 150
      }
    });